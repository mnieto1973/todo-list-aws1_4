pipeline {
    agent any
environment {
        STACK_NAME = 'todo-list-aws-1-4-staging'
         GIT_CREDENTIALS_ID = 'gitunir' // ID de las credenciales de Git configuradas en Jenkins
          
    }
    stages {
        stage('Get Code') {
            steps {
                script{
                    if ( env.BRANCH_NAME=='develop'){
                        git branch: 'develop', url: 'https://github.com/mnieto1973/todo-list-aws1_4.git'
                    }
                    else if (env.BRANCH_NAME=='master'){
                        git branch: 'master', url: 'https://github.com/mnieto1973/todo-list-aws1_4.git'
                         STACK_NAME = 'todo-list-aws-1-4-production'
                    }
                }
               
               
            }
        }
        stage('Static Test') {
            steps {
                sh 'flake8 src/ > flake8-report.txt'
                sh 'bandit -r src/ > bandit-report.txt'
                archiveArtifacts artifacts: '**/*-report.txt', allowEmptyArchive: true
            }
        }
        stage('Deploy') {
            steps {
                script{
                sh 'sam build'
                 if ( env.BRANCH_NAME=='develop'){
                          sh 'sam deploy --config-env staging --parameter-overrides Stage=staging --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset'
                 }
                  else if (env.BRANCH_NAME=='master'){
                         sh 'sam deploy --config-env production --parameter-overrides Stage=production --capabilities CAPABILITY_NAMED_IAM --no-fail-on-empty-changeset'
                    }
                }
               
            }
        }
        stage('Get Stack URL') {
            steps {
                script {
                    def url = sh(script: "aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query \"Stacks[0].Outputs[?OutputKey=='BaseUrlApi'].OutputValue\" --output text", returnStdout: true).trim()
                    env.BASE_URL = url
                    echo "Stack URL: ${BASE_URL}"
                }
            }
        }
         stage('Test') {
           steps {
                script {
                     if ( env.BRANCH_NAME=='develop'){
                    sh "export BASE_URL=${BASE_URL}"
                    sh 'pytest --junitxml=result.rest.xml test/integration/todoApiTest.py'
                     }
                      else if (env.BRANCH_NAME=='master'){
                          sh "export BASE_URL=${BASE_URL}"
                          sh 'pytest -m testProduccion --junitxml=result.rest.xml   test/integration/todoApiTest.py'
                    }
                }
                junit 'result*.xml'
            }
        }
         stage('Promote') {
            when {
                expression { env.BRANCH_NAME == 'develop' }
            }
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: env.GIT_CREDENTIALS_ID, usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh '''
                            git config --global credential.helper store
                            echo "https://${GIT_USERNAME}:${GIT_PASSWORD}@$(git config --get remote.origin.url | cut -d/ -f3-)" > ~/.git-credentials
                            git checkout master
                            git merge develop
                            git push origin master
                        '''
                    }
                }
            }
        }
    }
     post {
        cleanup {
            // Limpiar las credenciales guardadas en ~/.git-credentials
            sh 'rm -f ~/.git-credentials'
        }
    }
}